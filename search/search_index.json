{"config":{"lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Bienvenidos \ud83d\ude03 \u00b6 Success Gracias por confiar en kontinu para tu crecimiento. Si estas aqui con nosotros es porque hay un deseo en ti de crecer, superarte y ser mejor profesional. A lo largo de 6 d\u00edas, 3 horas diarias, 18 horas en total, estaremos en este bootcamp \ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f en cual esperamos sea de provecho y beneficio para tu carrera profesional. Agenda Semanal \ud83d\uddd3 \u00b6 Semana 1 Semana 2 D\u00eda 1 - Docker basics - Integracion de Docker con nuestra app - Ambientes de desarrollo local D\u00eda 4 - Intro a kubernetes - Objetos de Kubernetes - Traduccion de nuestra app en Docker a Kubernetes - Deploy hacia kubernetes. D\u00eda 2 - CI/CD con Docker - Deploy en ambientes Single Engine - Introduccion a Cloud Native Apps - Integraci\u00f3n de Docker con Cloud Native Apps D\u00eda 5 - Kubernetes Extras y add-ons - Storage Tier - Manejo de Stateful apps en Kubernetes. - M\u00e1s objetos de kubernetes. D\u00eda 3 - Docker Swarm - Creaci\u00f3n de un ambiente production ready con Swarm - Deployment Lifecycle de nuestra app D\u00eda 6 - Kubernetes app lifecycle via Helm - Kubernetes Operators. Agenda \ud83d\uddd3 Si desea ver la agenda compartida anteriormente p\u00e1gina Cursos \ud83d\udcda \u00b6 Estare lanzando pr\u00f3ximamente cursos en Udemy, debido a que varias personas nos indicaron que \"Les gustar\u00eda recibir estos cursos a su propio ritmo\"","title":"Container Bootcamp Expert"},{"location":"index.html#bienvenidos","text":"Success Gracias por confiar en kontinu para tu crecimiento. Si estas aqui con nosotros es porque hay un deseo en ti de crecer, superarte y ser mejor profesional. A lo largo de 6 d\u00edas, 3 horas diarias, 18 horas en total, estaremos en este bootcamp \ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f en cual esperamos sea de provecho y beneficio para tu carrera profesional.","title":"Bienvenidos \ud83d\ude03"},{"location":"index.html#agenda-semanal","text":"Semana 1 Semana 2 D\u00eda 1 - Docker basics - Integracion de Docker con nuestra app - Ambientes de desarrollo local D\u00eda 4 - Intro a kubernetes - Objetos de Kubernetes - Traduccion de nuestra app en Docker a Kubernetes - Deploy hacia kubernetes. D\u00eda 2 - CI/CD con Docker - Deploy en ambientes Single Engine - Introduccion a Cloud Native Apps - Integraci\u00f3n de Docker con Cloud Native Apps D\u00eda 5 - Kubernetes Extras y add-ons - Storage Tier - Manejo de Stateful apps en Kubernetes. - M\u00e1s objetos de kubernetes. D\u00eda 3 - Docker Swarm - Creaci\u00f3n de un ambiente production ready con Swarm - Deployment Lifecycle de nuestra app D\u00eda 6 - Kubernetes app lifecycle via Helm - Kubernetes Operators. Agenda \ud83d\uddd3 Si desea ver la agenda compartida anteriormente p\u00e1gina","title":"Agenda Semanal \ud83d\uddd3"},{"location":"index.html#cursos","text":"Estare lanzando pr\u00f3ximamente cursos en Udemy, debido a que varias personas nos indicaron que \"Les gustar\u00eda recibir estos cursos a su propio ritmo\"","title":"Cursos \ud83d\udcda"},{"location":"about.html","text":"Acerca de Mi - Marcos Cano \u00b6 Informaci\u00f3n Personal \u00b6 Hola mi nombre es Marcos Cano . Vivo actualmente en Ciudad de Guatemala \ud83c\uddec\ud83c\uddf9 Central America Aqui se habla espa\u00f1ol Tengo el privilegio de ser Docker Community Leader en Guatemala . \u00b6 Desde 2017 tengo el honor de servir a la comunidad siendo Community Leader, no me hace mas especial pero si con la responsabilidad de compartir y facilitar el conocimiento a mas personas En el a\u00f1o 2020 durante el DockerCon tuve el honor de ser premiado con \"Community Leader Award\"; por la pasi\u00f3n que siempre he tenido de esforzarme y compartir. A continuaci\u00f3n ve nuestro meetup \u00b6 DCA Tambien soy Docker Certified Associate \ud83e\udd13 \ud83d\udcb5 Nos paga Docker? Nop, pero lo hago con todo el gusto. Qu\u00e9 son las cosa que amo \u2764\ufe0f ? \u00b6 Ense\u00f1ar con pasi\u00f2n y compartir. Docker & Kubernetes El hacer todo con Docker y containers (cualquier proyecto lo que sea). Empoderar a otros a ser mejores. Tomar caf\u00e9 \u2615\ufe0f y todo lo que tenga que ver con caf\u00e9 M\u00fasica \ud83d\uddd2 Algo de mi carrera profesional \u00b6 Senior Devops Engineer Devops Consultant and trainer. Docker Community Leader. He ayudado en varias ocasciones a modernizar aplicaciones y migrar monolitos a arquitectura de microservicios Me especializo en Docker: CI/CD Docker Cloud Native Infrastructura como c\u00f3digo Tuve la incre\u00edble oportunidad de realizar varias publicaciones para la IEEE y algunos compa\u00f1eros de Francia y Guatemala, siempre usando Docker para realizar un emulador de redes mobiles (MANET) usando containers y mi \"propio\" orquestador de containers \"Dockemu\" (Docker + Emulator), este es mi perfil de la IEEE Puedes ver mis redes sociales y seguirme en linketree","title":"Mi"},{"location":"about.html#acerca-de-mi-marcos-cano","text":"","title":"Acerca de Mi - Marcos Cano"},{"location":"about.html#informacion-personal","text":"Hola mi nombre es Marcos Cano . Vivo actualmente en Ciudad de Guatemala \ud83c\uddec\ud83c\uddf9 Central America Aqui se habla espa\u00f1ol","title":"Informaci\u00f3n Personal"},{"location":"about.html#tengo-el-privilegio-de-ser-docker-community-leader-en-guatemala","text":"Desde 2017 tengo el honor de servir a la comunidad siendo Community Leader, no me hace mas especial pero si con la responsabilidad de compartir y facilitar el conocimiento a mas personas En el a\u00f1o 2020 durante el DockerCon tuve el honor de ser premiado con \"Community Leader Award\"; por la pasi\u00f3n que siempre he tenido de esforzarme y compartir.","title":"Tengo el privilegio de ser Docker Community Leader en Guatemala."},{"location":"about.html#a-continuacion-ve-nuestro-meetup","text":"DCA Tambien soy Docker Certified Associate \ud83e\udd13 \ud83d\udcb5 Nos paga Docker? Nop, pero lo hago con todo el gusto.","title":"A continuaci\u00f3n ve nuestro meetup"},{"location":"about.html#que-son-las-cosa-que-amo","text":"Ense\u00f1ar con pasi\u00f2n y compartir. Docker & Kubernetes El hacer todo con Docker y containers (cualquier proyecto lo que sea). Empoderar a otros a ser mejores. Tomar caf\u00e9 \u2615\ufe0f y todo lo que tenga que ver con caf\u00e9 M\u00fasica \ud83d\uddd2","title":"Qu\u00e9 son las cosa que amo \u2764\ufe0f ?"},{"location":"about.html#algo-de-mi-carrera-profesional","text":"Senior Devops Engineer Devops Consultant and trainer. Docker Community Leader. He ayudado en varias ocasciones a modernizar aplicaciones y migrar monolitos a arquitectura de microservicios Me especializo en Docker: CI/CD Docker Cloud Native Infrastructura como c\u00f3digo Tuve la incre\u00edble oportunidad de realizar varias publicaciones para la IEEE y algunos compa\u00f1eros de Francia y Guatemala, siempre usando Docker para realizar un emulador de redes mobiles (MANET) usando containers y mi \"propio\" orquestador de containers \"Dockemu\" (Docker + Emulator), este es mi perfil de la IEEE Puedes ver mis redes sociales y seguirme en linketree","title":"Algo de mi carrera profesional"},{"location":"contact.html","text":".md-typeset h1{ color: #01E5C1; } Contactanos si tienes alguna duda, comentario o sugerencia Loading\u2026 \u2192","title":"Contacto"},{"location":"faq.html","text":"Pregungas Frecuentes \u00b6 Q: Necesito ayuda con algo del laboratorio o hacer una consulta \u00b6 Hemos creado una v\u00eda de comunicacion rapida via slack en donde vas a poder solventar cualquier duda. Q: Qu\u00e9 sucede si no puedo asistir uno o varios d\u00edas? \u00b6 Deber\u00e1s dejarnos saber que no pudiste asistir, ya sea por correo info@kontinu.io , y nostros te estaremos haciendo llegar la grabaci\u00f3n del d\u00eda. Ojo que estas grabaciones solo estar\u00e1n disponibles para aquellas personnas que cancelaron su ticket.","title":"FAQ"},{"location":"faq.html#pregungas-frecuentes","text":"","title":"Pregungas Frecuentes"},{"location":"faq.html#q-necesito-ayuda-con-algo-del-laboratorio-o-hacer-una-consulta","text":"Hemos creado una v\u00eda de comunicacion rapida via slack en donde vas a poder solventar cualquier duda.","title":"Q: Necesito ayuda con algo del laboratorio o hacer una consulta"},{"location":"faq.html#q-que-sucede-si-no-puedo-asistir-uno-o-varios-dias","text":"Deber\u00e1s dejarnos saber que no pudiste asistir, ya sea por correo info@kontinu.io , y nostros te estaremos haciendo llegar la grabaci\u00f3n del d\u00eda. Ojo que estas grabaciones solo estar\u00e1n disponibles para aquellas personnas que cancelaron su ticket.","title":"Q: Qu\u00e9 sucede si no puedo asistir uno o varios d\u00edas?"},{"location":"kontinu.html","text":"Kontinu naci\u00f3 de la necesidad de lograr que empresas e individuos alcancen un nivel superior en: Devops \u267e Docker \ud83d\udc33 Kubernetes \u2638\ufe0f Cloud Native \u2601\ufe0f Actualmente Ofrecemos tres tipos de servicios: Consultor\u00edas nos dedicamos a lograr y facilitar que empresas adopten: Docker Kubernetes Devops Cloud de una manera sencilla y sin tanta friccion. Bootcamps Constantemente ofrecemos bootcamps, que son reuniones de entrenamiento en donde llevamos a nuestros asistentes (alumnos) a un nivel superior, algunas veces es de manera gratuita y otras veces es con contribucion. Si deseas que demos estos bootcamps dentro de tu propia empresa o ambiente de trabajo no dudes en contactarnos; algunos de los topicos que hablamos son: Devops Docker kubernetes Git CI/CD Infrastructura como codigo Cloud Transformacion de legacy apps => Cloud Native apps las grabaciones de nuestros bootcamps pasados los puedes ver en nuestro canal de youtube Cursos Pr\u00f3ximamente estaremos lanzando cursos de: Docker Kubernetes Devops Esta pendiente de nuestras redes sociales para saber mas. Entre los clientes que hemos dado consultor\u00edas/bootcamps: BBVA, promad MX, UFM. Por favor cont\u00e1ctanos si necesitas ayuda en cualquier de estos temas:.","title":"Kontinu"},{"location":"docker/index.html","text":"What is Docker? \u00b6","title":"What is Docker?"},{"location":"docker/index.html#what-is-docker","text":"","title":"What is Docker?"},{"location":"docker/compose-to-swarm/index.html","text":"From Compose to Swarm \u00b6 Meet our app \u00b6 Architecture \u00b6 Nada fancy","title":"From Compose to Swarm"},{"location":"docker/compose-to-swarm/index.html#from-compose-to-swarm","text":"","title":"From Compose to Swarm"},{"location":"docker/compose-to-swarm/index.html#meet-our-app","text":"","title":"Meet our app"},{"location":"docker/compose-to-swarm/index.html#architecture","text":"Nada fancy","title":"Architecture"},{"location":"docker/compose-to-swarm/awesome-compose.html","text":"Awesome-compose \u00b6 A curated list of Docker Compose samples. https://github.com/docker/awesome-compose","title":"Awesome-compose"},{"location":"docker/compose-to-swarm/awesome-compose.html#awesome-compose","text":"A curated list of Docker Compose samples. https://github.com/docker/awesome-compose","title":"Awesome-compose"},{"location":"docker/compose-to-swarm/compose-k8.html","text":"Compose on Kubernetes \u00b6 https://github.com/docker/compose-on-kubernetes 1 2 # in docker desktop kubectl api-versions | grep compose Our app \u00b6 1 2 3 4 docker stack deploy --orchestrator = kubernetes -c docker-compose.simple.yml compose_swarm_k8 kubectl get all -l \"com.docker.stack.namespace=compose_swarm_k8\" From examples \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # --------- echo \"\"\" version: '3.3' services: db: build: db image: dockersamples/k8s-wordsmith-db words: build: words image: dockersamples/k8s-wordsmith-api deploy: replicas: 5 web: build: web image: dockersamples/k8s-wordsmith-web ports: - \" 33000 :80 \" \"\"\" > compose/compose-k8.yaml docker stack deploy --orchestrator = kubernetes -c compose/compose-k8.yaml hellokube Other installations \u00b6 AKS EKS GKE kind minikube microk8s kompose \u00b6 only version 1,2 or 3 conversion matrix 1 kompose convert -f compose/docker-compose.kompose.yml --stdout","title":"Compose on Kubernetes"},{"location":"docker/compose-to-swarm/compose-k8.html#compose-on-kubernetes","text":"https://github.com/docker/compose-on-kubernetes 1 2 # in docker desktop kubectl api-versions | grep compose","title":"Compose on Kubernetes"},{"location":"docker/compose-to-swarm/compose-k8.html#our-app","text":"1 2 3 4 docker stack deploy --orchestrator = kubernetes -c docker-compose.simple.yml compose_swarm_k8 kubectl get all -l \"com.docker.stack.namespace=compose_swarm_k8\"","title":"Our app"},{"location":"docker/compose-to-swarm/compose-k8.html#from-examples","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # --------- echo \"\"\" version: '3.3' services: db: build: db image: dockersamples/k8s-wordsmith-db words: build: words image: dockersamples/k8s-wordsmith-api deploy: replicas: 5 web: build: web image: dockersamples/k8s-wordsmith-web ports: - \" 33000 :80 \" \"\"\" > compose/compose-k8.yaml docker stack deploy --orchestrator = kubernetes -c compose/compose-k8.yaml hellokube","title":"From examples"},{"location":"docker/compose-to-swarm/compose-k8.html#other-installations","text":"AKS EKS GKE kind minikube microk8s","title":"Other installations"},{"location":"docker/compose-to-swarm/compose-k8.html#kompose","text":"only version 1,2 or 3 conversion matrix 1 kompose convert -f compose/docker-compose.kompose.yml --stdout","title":"kompose"},{"location":"docker/compose-to-swarm/docker-compose.html","text":"Docker Compose \u00b6 to start using this project make sure you follow up the .env.example fill it with your own variables 1 cp .env.example .env Local Development - Hot Reload \u00b6 1 2 3 4 docker-compose -f docker-compose.yml -f compose/docker-compose-hotreload.yml config docker-compose -f docker-compose.yml -f compose/docker-compose-hotreload.yml up Workflow \u00b6 graph TD; id1>Common Dev Workflow with compose]; %% comment docker-compose.yml+app -- docker-compose build -->DockerImage; DockerImage -- docker-compose push -->DockerHub; Template docker-compose.yml file \u00b6 1 docker-compose config Build \u00b6 1 2 3 4 5 6 # build and up docker-compose -f docker-compose.yml -f docker-compose-build.yml up --build # only build docker-compose -f docker-compose.yml -f docker-compose-build.yml build # push it docker-compose -f docker-compose.yml -f docker-compose-build.yml push Start \u00b6 1 docker-compose up Check the default/created network \u00b6 1 2 3 docker network ls docker network inspect $( docker network ls --format \"{{.Name}}\" --filter name = compose ) docker-compose useful commands \u00b6 1 2 3 4 5 6 7 8 # running containers docker-compose ps # running processes in containers docker-compose top # logs docker-compose logs","title":"[Docker Compose](https://docs.docker.com/compose/)"},{"location":"docker/compose-to-swarm/docker-compose.html#docker-compose","text":"to start using this project make sure you follow up the .env.example fill it with your own variables 1 cp .env.example .env","title":"Docker Compose"},{"location":"docker/compose-to-swarm/docker-compose.html#local-development-hot-reload","text":"1 2 3 4 docker-compose -f docker-compose.yml -f compose/docker-compose-hotreload.yml config docker-compose -f docker-compose.yml -f compose/docker-compose-hotreload.yml up","title":"Local Development - Hot Reload"},{"location":"docker/compose-to-swarm/docker-compose.html#workflow","text":"graph TD; id1>Common Dev Workflow with compose]; %% comment docker-compose.yml+app -- docker-compose build -->DockerImage; DockerImage -- docker-compose push -->DockerHub;","title":"Workflow"},{"location":"docker/compose-to-swarm/docker-compose.html#template-docker-composeyml-file","text":"1 docker-compose config","title":"Template docker-compose.yml file"},{"location":"docker/compose-to-swarm/docker-compose.html#build","text":"1 2 3 4 5 6 # build and up docker-compose -f docker-compose.yml -f docker-compose-build.yml up --build # only build docker-compose -f docker-compose.yml -f docker-compose-build.yml build # push it docker-compose -f docker-compose.yml -f docker-compose-build.yml push","title":"Build"},{"location":"docker/compose-to-swarm/docker-compose.html#start","text":"1 docker-compose up","title":"Start"},{"location":"docker/compose-to-swarm/docker-compose.html#check-the-defaultcreated-network","text":"1 2 3 docker network ls docker network inspect $( docker network ls --format \"{{.Name}}\" --filter name = compose )","title":"Check the default/created network"},{"location":"docker/compose-to-swarm/docker-compose.html#docker-compose-useful-commands","text":"1 2 3 4 5 6 7 8 # running containers docker-compose ps # running processes in containers docker-compose top # logs docker-compose logs","title":"docker-compose useful commands"},{"location":"docker/compose-to-swarm/docker.html","text":"Local Environment \u00b6 Just docker run? \u00b6 1 2 3 4 5 6 7 8 docker run -d --rm --name -p 7777 :80 web_server nginx open http://localhost:7777 docker run -it --rm --name container1 alpine sh Does not work Fixed docker runs \u00b6 1 2 3 4 5 6 7 8 9 10 11 #create a local network, so that containers can see each other docker network create mynetwork # create the backend Redis container and attach it to the network docker run --name redis -d --network mynetwork redis:alpine # create the app container, expose it in a different port docker run -p 5500 :5000 -it --network mynetwork -e \"REDIS_HOST=redis\" mcano/docker:intro # OR if you prefer local environment development supported by Docker docker run -p 5500 :5000 -it --network mynetwork -e \"REDIS_HOST=redis\" -v $( pwd ) :/code mcano/docker:intro sh","title":"Local Environment"},{"location":"docker/compose-to-swarm/docker.html#local-environment","text":"","title":"Local Environment"},{"location":"docker/compose-to-swarm/docker.html#just-docker-run","text":"1 2 3 4 5 6 7 8 docker run -d --rm --name -p 7777 :80 web_server nginx open http://localhost:7777 docker run -it --rm --name container1 alpine sh Does not work","title":"Just docker run?"},{"location":"docker/compose-to-swarm/docker.html#fixed-docker-runs","text":"1 2 3 4 5 6 7 8 9 10 11 #create a local network, so that containers can see each other docker network create mynetwork # create the backend Redis container and attach it to the network docker run --name redis -d --network mynetwork redis:alpine # create the app container, expose it in a different port docker run -p 5500 :5000 -it --network mynetwork -e \"REDIS_HOST=redis\" mcano/docker:intro # OR if you prefer local environment development supported by Docker docker run -p 5500 :5000 -it --network mynetwork -e \"REDIS_HOST=redis\" -v $( pwd ) :/code mcano/docker:intro sh","title":"Fixed docker runs"},{"location":"docker/compose-to-swarm/intro-swarm.html","text":"Intro Swarm Mode \u00b6 This section will give you the necessary to go full to production with Docker swarm mode. Swarm vs K8 Docker swarm es mejor que kubernetes .... pero ustedes no estan listos para esta conversacion - Just Kidding Features Cluster management integrated with Docker Engine Declarative service model Scaling Desired state reconciliation (The swarm manager node constantly monitors the desired state ) Multi-host networking Service discovery Load balancing Secure by default (intra node) Rolling updates Hyper EASY Setup \u00b6 Local 1 2 3 4 5 6 7 8 9 #!/bin/bash # check swarm is enabled docker info |grep -i swarm docker swarm init || echo \"Already in Swarm Mode\" docker node ls PlaywithDocker 1 2 3 4 5 6 7 8 9 10 #!/bin/bash 1. Go to http://play-with-docker.com sign in with your user:pass (create account if needed). 2. Click on the wrench and select either \"3 Managers and 2 Workers\" or \"5 managers and no workers\" 3. Unless instructed run all the commands on the first node. 4. Make sure to clone the repo in the swarm nodes (PWD) git clone https://github.com/jmarcos-cano/compose-to-swarm.git cd compose-to-swarm DigitalOcean 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash # Create 3 droplets with private networking enabled. # WHY 3? # install docker export leader=165.227.74.229 export manager1=165.227.77.199 export manager2=165.227.65.241 ssh root@${leader} \"docker version || curl -fsSL https://get.docker.com/ | sh \" && \\ ssh root@${manager1} \"docker version || curl -fsSL https://get.docker.com/ | sh\" && \\ ssh root@${manager2} \"docker version || curl -fsSL https://get.docker.com/ | sh\" ssh root@${leader} \"sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64\" -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose\" &&\\ ssh root@${manager1} \"sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64\" -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose\" &&\\ ssh root@${manager2} \"sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64\" -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose\" # init swarm in 1 manager #ssh root@${leader} \"docker swarm init --advertise-addr eth1\" # get the manager join-token #ssh root@${leader} \"docker swarm join-token manager\" # Join the other managers ## PLUS! docker -H ssh://root@${leader} node ls","title":"Intro [Swarm Mode](https://docs.docker.com/engine/swarm/)"},{"location":"docker/compose-to-swarm/intro-swarm.html#intro-swarm-mode","text":"This section will give you the necessary to go full to production with Docker swarm mode. Swarm vs K8","title":"Intro Swarm Mode"},{"location":"docker/compose-to-swarm/intro-swarm.html#setup","text":"Local 1 2 3 4 5 6 7 8 9 #!/bin/bash # check swarm is enabled docker info |grep -i swarm docker swarm init || echo \"Already in Swarm Mode\" docker node ls PlaywithDocker 1 2 3 4 5 6 7 8 9 10 #!/bin/bash 1. Go to http://play-with-docker.com sign in with your user:pass (create account if needed). 2. Click on the wrench and select either \"3 Managers and 2 Workers\" or \"5 managers and no workers\" 3. Unless instructed run all the commands on the first node. 4. Make sure to clone the repo in the swarm nodes (PWD) git clone https://github.com/jmarcos-cano/compose-to-swarm.git cd compose-to-swarm DigitalOcean 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash # Create 3 droplets with private networking enabled. # WHY 3? # install docker export leader=165.227.74.229 export manager1=165.227.77.199 export manager2=165.227.65.241 ssh root@${leader} \"docker version || curl -fsSL https://get.docker.com/ | sh \" && \\ ssh root@${manager1} \"docker version || curl -fsSL https://get.docker.com/ | sh\" && \\ ssh root@${manager2} \"docker version || curl -fsSL https://get.docker.com/ | sh\" ssh root@${leader} \"sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64\" -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose\" &&\\ ssh root@${manager1} \"sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64\" -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose\" &&\\ ssh root@${manager2} \"sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64\" -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose\" # init swarm in 1 manager #ssh root@${leader} \"docker swarm init --advertise-addr eth1\" # get the manager join-token #ssh root@${leader} \"docker swarm join-token manager\" # Join the other managers ## PLUS! docker -H ssh://root@${leader} node ls","title":"Setup"},{"location":"docker/compose-to-swarm/swarm.html","text":"Swarm Steps \u00b6 0. git clone \u00b6 1 2 git clone https://github.com/jmarcos-cano/compose-to-swarm.git cd compose-to-swarm 1. Enable Visualizer on port 8080 \u00b6 1 2 3 4 5 6 7 8 docker service create \\ --name = viz \\ --publish = 8080 :8080/tcp \\ --constraint = node.role == manager \\ --mount = type = bind,src = /var/run/docker.sock,dst = /var/run/docker.sock \\ dockersamples/visualizer # wait until it says \"service converged\" \u26a0\ufe0f go to your visualizer (click in your upper link port 8080) and see how the services are spread. 2. Simple service create \u00b6 1 2 3 4 5 # Create a swarm service from a Nginx docker image docker service create --name nginx-ws -p 80 :80 nginx # List the current services docker service ls \u26a0\ufe0f Go to your visualizer (click in your upper link port 8080) and see how the services are spread. Click also on Port 80 (Nginx) - it should say \"Welcome to Nginx\" Scale the service 1 docker service update --replicas 3 nginx-ws Go to your visualizer (click in your upper link port 8080) and see how the services are spread. Checking service logs 1 docker service logs nginx-ws Delete the service 1 2 3 4 docker service rm nginx-ws # check for running services docker service ls 3. Simple Stack deploy \u00b6 1 2 3 4 5 6 7 # inspect the stack file and try to understand it cat docker-compose.simple.yml # deploy it docker stack deploy -c docker-compose.simple.yml --resolve-image = always --with-registry-auth compose_swarm # list current services docker service ls \u26a0\ufe0f Go to your app (click in your upper link port 500) and see how the app looks like. ! Go to your visualizer (click in your upper link port 8080) and see how the services are spread. Show current status 1 docker stack ps compose_swarm 4. Environment Variables injection \u00b6 \ud83d\udca1 This will give you a small intro to how you can manage configuration per environment (dev,qa,stage,production) 1 2 3 4 5 6 7 8 9 10 # inspect the stack file and try to find the directive \"FOO=${FOO:-BAR}\" cat docker-compose.simple.yml # inject the new value export FOO = \"Development\" # deploy it and see it update automatically docker stack deploy -c docker-compose.simple.yml --resolve-image = always --with-registry-auth compose_swarm docker stack services compose_swarm 1 2 # PROD docker stack deploy -c < ( docker-compose --env-file .configs/production.env -f docker-compose.simple.yml config ) --resolve-image = always --with-registry-auth compose_swarm_prod \ud83e\udd47 Dare you to put your own Text there, see how sometimes the application becomes unaccessible? 5. Scale web app \u00b6 Want to handle more traffic? Want to be more resilient? Want High Availability? Swarm got you covered 1 docker service scale compose_swarm_web = 4 \u26a0\ufe0f Go to your app (click in your upper link port 500) and see how which task/container responds Go to your visualizer (click in your upper link port 8080) and see how the services are spread. 6. Declarative Deployment Replicas \u00b6 Instead of scaling your service everytime, why don't we declare it? 1 2 3 4 5 # Inspect the .replicas file and find \"deploy: \" section cat compose/docker-compose.replicas.yml # Deploy new update for the stack DEPLOYMENT_REPLICAS = 7 docker stack deploy -c compose/docker-compose.replicas.yml --resolve-image = always compose_swarm \u26a0\ufe0f Go to your visualizer (click in your upper link port 8080) and see how the services are spread. 7. Rolling Updates \u00b6 Rolling updates let you update your app with zero-downtime. \ud83d\udca1 v1 has been running for 2 weeks now and you are ready to ship your new and hottest feature on v2, with rolling updates you can easily ship v2 let it coexist with v1 until v1 gets fully drain (removed) and v2 gets out. 1 2 3 4 5 6 7 8 9 # inspect .rolling file and find the \"update_config:\" section, try to understand it less compose/docker-compose.rolling.yml # Deploy/update this new configuration for your stack docker stack deploy -c < ( docker-compose -f compose/docker-compose.rolling.yml config ) --resolve-image = always compose_swarm # update image docker stack deploy -c < ( IMAGE_NAME = mcano/compose-to-swarm:v2 docker-compose -f compose/docker-compose.rolling.yml config ) --resolve-image = always compose_swarm Lets force update to see the rolling updates \u00b6 Do this how many times you need in order to see it working. 1 2 # graceful full restart of your app docker service update --force compose_swarm_web Go to your visualizer (click in your upper link port 8080) and see how the services are spread. 8. Host limit resource \u00b6 One can prevent memory starvation or CPU consumption of your app by adding \"resources:\" section 1 2 3 4 5 # inspect .resources file and find the \"resources:\" section, try to understand it less compose/docker-compose.resources.yml # Deploy/update this new configuration for your stack docker stack deploy -c compose/docker-compose.resources.yml --resolve-image = always compose_swarm 9. Health Check and Self healing \u00b6 Auto restarts and health-check can also be possible by adding \"healthcheck: \" 1 2 3 4 5 6 7 8 9 10 11 # Run docker ps first to see there's no (healthy) docker ps # inspect .health file and find the \"healthcheck:\" section, try to understand it less compose/docker-compose.health.yml # Deploy/update this new configuration for your stack docker stack deploy -c compose/docker-compose.health.yml --resolve-image = always compose_swarm # after a few seconds run docker ps Do a: docker service ps compose_swarm_web , Identify the placement of a container (identify on which node is running). Jump into that node and run docker ps find the container and its ID (first column), kill it and see how it self heals 1 docker kill <container ID> info Go to your visualizer (click in your upper link port 8080) and see how the services are spread and self healed. Full Production + LB \u00b6 1 2 3 docker stack deploy -c <(docker-compose --env-file .configs/production.env -f docker-compose.yml config ) --resolve-image=always --with-registry-auth compose_swarm_prod open http://138-197-49-123.nip.io/","title":"Swarm Steps"},{"location":"docker/compose-to-swarm/swarm.html#swarm-steps","text":"","title":"Swarm Steps"},{"location":"docker/compose-to-swarm/swarm.html#0-git-clone","text":"1 2 git clone https://github.com/jmarcos-cano/compose-to-swarm.git cd compose-to-swarm","title":"0. git clone"},{"location":"docker/compose-to-swarm/swarm.html#1-enable-visualizer-on-port-8080","text":"1 2 3 4 5 6 7 8 docker service create \\ --name = viz \\ --publish = 8080 :8080/tcp \\ --constraint = node.role == manager \\ --mount = type = bind,src = /var/run/docker.sock,dst = /var/run/docker.sock \\ dockersamples/visualizer # wait until it says \"service converged\" \u26a0\ufe0f go to your visualizer (click in your upper link port 8080) and see how the services are spread.","title":"1. Enable Visualizer on port 8080"},{"location":"docker/compose-to-swarm/swarm.html#2-simple-service-create","text":"1 2 3 4 5 # Create a swarm service from a Nginx docker image docker service create --name nginx-ws -p 80 :80 nginx # List the current services docker service ls \u26a0\ufe0f Go to your visualizer (click in your upper link port 8080) and see how the services are spread. Click also on Port 80 (Nginx) - it should say \"Welcome to Nginx\" Scale the service 1 docker service update --replicas 3 nginx-ws Go to your visualizer (click in your upper link port 8080) and see how the services are spread. Checking service logs 1 docker service logs nginx-ws Delete the service 1 2 3 4 docker service rm nginx-ws # check for running services docker service ls","title":"2. Simple service create"},{"location":"docker/compose-to-swarm/swarm.html#3-simple-stack-deploy","text":"1 2 3 4 5 6 7 # inspect the stack file and try to understand it cat docker-compose.simple.yml # deploy it docker stack deploy -c docker-compose.simple.yml --resolve-image = always --with-registry-auth compose_swarm # list current services docker service ls \u26a0\ufe0f Go to your app (click in your upper link port 500) and see how the app looks like. ! Go to your visualizer (click in your upper link port 8080) and see how the services are spread. Show current status 1 docker stack ps compose_swarm","title":"3. Simple Stack deploy"},{"location":"docker/compose-to-swarm/swarm.html#4-environment-variables-injection","text":"\ud83d\udca1 This will give you a small intro to how you can manage configuration per environment (dev,qa,stage,production) 1 2 3 4 5 6 7 8 9 10 # inspect the stack file and try to find the directive \"FOO=${FOO:-BAR}\" cat docker-compose.simple.yml # inject the new value export FOO = \"Development\" # deploy it and see it update automatically docker stack deploy -c docker-compose.simple.yml --resolve-image = always --with-registry-auth compose_swarm docker stack services compose_swarm 1 2 # PROD docker stack deploy -c < ( docker-compose --env-file .configs/production.env -f docker-compose.simple.yml config ) --resolve-image = always --with-registry-auth compose_swarm_prod \ud83e\udd47 Dare you to put your own Text there, see how sometimes the application becomes unaccessible?","title":"4. Environment Variables injection"},{"location":"docker/compose-to-swarm/swarm.html#5-scale-web-app","text":"Want to handle more traffic? Want to be more resilient? Want High Availability? Swarm got you covered 1 docker service scale compose_swarm_web = 4 \u26a0\ufe0f Go to your app (click in your upper link port 500) and see how which task/container responds Go to your visualizer (click in your upper link port 8080) and see how the services are spread.","title":"5. Scale web app"},{"location":"docker/compose-to-swarm/swarm.html#6-declarative-deployment-replicas","text":"Instead of scaling your service everytime, why don't we declare it? 1 2 3 4 5 # Inspect the .replicas file and find \"deploy: \" section cat compose/docker-compose.replicas.yml # Deploy new update for the stack DEPLOYMENT_REPLICAS = 7 docker stack deploy -c compose/docker-compose.replicas.yml --resolve-image = always compose_swarm \u26a0\ufe0f Go to your visualizer (click in your upper link port 8080) and see how the services are spread.","title":"6. Declarative Deployment Replicas"},{"location":"docker/compose-to-swarm/swarm.html#7-rolling-updates","text":"Rolling updates let you update your app with zero-downtime. \ud83d\udca1 v1 has been running for 2 weeks now and you are ready to ship your new and hottest feature on v2, with rolling updates you can easily ship v2 let it coexist with v1 until v1 gets fully drain (removed) and v2 gets out. 1 2 3 4 5 6 7 8 9 # inspect .rolling file and find the \"update_config:\" section, try to understand it less compose/docker-compose.rolling.yml # Deploy/update this new configuration for your stack docker stack deploy -c < ( docker-compose -f compose/docker-compose.rolling.yml config ) --resolve-image = always compose_swarm # update image docker stack deploy -c < ( IMAGE_NAME = mcano/compose-to-swarm:v2 docker-compose -f compose/docker-compose.rolling.yml config ) --resolve-image = always compose_swarm","title":"7. Rolling Updates"},{"location":"docker/compose-to-swarm/swarm.html#lets-force-update-to-see-the-rolling-updates","text":"Do this how many times you need in order to see it working. 1 2 # graceful full restart of your app docker service update --force compose_swarm_web Go to your visualizer (click in your upper link port 8080) and see how the services are spread.","title":"Lets force update to see the rolling updates"},{"location":"docker/compose-to-swarm/swarm.html#8-host-limit-resource","text":"One can prevent memory starvation or CPU consumption of your app by adding \"resources:\" section 1 2 3 4 5 # inspect .resources file and find the \"resources:\" section, try to understand it less compose/docker-compose.resources.yml # Deploy/update this new configuration for your stack docker stack deploy -c compose/docker-compose.resources.yml --resolve-image = always compose_swarm","title":"8. Host limit resource"},{"location":"docker/compose-to-swarm/swarm.html#9-health-check-and-self-healing","text":"Auto restarts and health-check can also be possible by adding \"healthcheck: \" 1 2 3 4 5 6 7 8 9 10 11 # Run docker ps first to see there's no (healthy) docker ps # inspect .health file and find the \"healthcheck:\" section, try to understand it less compose/docker-compose.health.yml # Deploy/update this new configuration for your stack docker stack deploy -c compose/docker-compose.health.yml --resolve-image = always compose_swarm # after a few seconds run docker ps Do a: docker service ps compose_swarm_web , Identify the placement of a container (identify on which node is running). Jump into that node and run docker ps find the container and its ID (first column), kill it and see how it self heals 1 docker kill <container ID> info Go to your visualizer (click in your upper link port 8080) and see how the services are spread and self healed.","title":"9. Health Check and Self healing"},{"location":"docker/compose-to-swarm/swarm.html#full-production-lb","text":"1 2 3 docker stack deploy -c <(docker-compose --env-file .configs/production.env -f docker-compose.yml config ) --resolve-image=always --with-registry-auth compose_swarm_prod open http://138-197-49-123.nip.io/","title":"Full Production + LB"},{"location":"extras/agenda.html","text":"Agenda Semanal \u00b6 Semana 1 \u00b6 Semana 2 \u00b6","title":"Agenda"},{"location":"extras/agenda.html#agenda-semanal","text":"","title":"Agenda Semanal"},{"location":"extras/agenda.html#semana-1","text":"","title":"Semana 1"},{"location":"extras/agenda.html#semana-2","text":"","title":"Semana 2"},{"location":"extras/extras.html","text":"Extras \u00b6 Si desea ver la Agenda Semanal Si desea llenar la Encuesta/Feedback","title":"Index"},{"location":"extras/extras.html#extras","text":"Si desea ver la Agenda Semanal Si desea llenar la Encuesta/Feedback","title":"Extras"},{"location":"extras/feedback.html","text":"Feedback \u00b6 En cualquier momento sientase en la libertad de llenar este formulario Le recomendamos que lo llene al finalizar el curso ya que es hasta el final que tendr\u00e1 una experiencia completa; ademas solo se permite llenarla una sola vez Loading\u2026","title":"Feedback"},{"location":"extras/feedback.html#feedback","text":"En cualquier momento sientase en la libertad de llenar este formulario Le recomendamos que lo llene al finalizar el curso ya que es hasta el final que tendr\u00e1 una experiencia completa; ademas solo se permite llenarla una sola vez Loading\u2026","title":"Feedback"},{"location":"extras/slack.html","text":"usaremos Slack para comunicarnos en todo momento \u00b6 Escribenos un correo a info@kontinu.io si aun no has recibido tu acceso a slack. Este canal de slack servir\u00e1 para resolver dudas y para dar anuncios. Cada d\u00eda habra un link nuevo a zoom asi que esta pendiente a las notificaciones de slack para que puedas acceder a cada reuni\u00f3n.","title":"Slack"},{"location":"extras/slack.html#usaremos-slack-para-comunicarnos-en-todo-momento","text":"Escribenos un correo a info@kontinu.io si aun no has recibido tu acceso a slack. Este canal de slack servir\u00e1 para resolver dudas y para dar anuncios. Cada d\u00eda habra un link nuevo a zoom asi que esta pendiente a las notificaciones de slack para que puedas acceder a cada reuni\u00f3n.","title":"usaremos Slack para comunicarnos en todo momento"},{"location":"kubernetes/index.html","text":"Kubernetes \u00b6","title":"Kubernetes"},{"location":"kubernetes/index.html#kubernetes","text":"","title":"Kubernetes"},{"location":"kubernetes/helm/index.html","text":"Helm Workshop: Docker Online Meetups \u00b6 El proposito es poder escribir Helm v3 Charts Formato del Taller \u00b6 Este taller tiene 4 secciones importantes. Getting Started Charts Subcharts Templating Objetivo \u00b6 Vamos a traducir el app popular de Docker voting-app demo e instalarla en un Cluster de k8 Comenzaremos con un chart sencillo y de ahi avanzaremos. La aplicaion de Docker tiene 5 componentes: A front-end for users to vote (dockersamples/examplevotingapp_vote:before) A back-end that tallies votes (dockersamples/examplevotingapp_vote:before - The voting frontend dockersamples/examplevotingapp_worker) An admin interface to see the results (dockersamples/examplevotingapp_result:before) Redis cache (redis:alpine) A PostgreSQL database (postgres:9.4)","title":"Helm Workshop: Docker Online Meetups"},{"location":"kubernetes/helm/index.html#helm-workshop-docker-online-meetups","text":"El proposito es poder escribir Helm v3 Charts","title":"Helm Workshop: Docker Online Meetups"},{"location":"kubernetes/helm/index.html#formato-del-taller","text":"Este taller tiene 4 secciones importantes. Getting Started Charts Subcharts Templating","title":"Formato del Taller"},{"location":"kubernetes/helm/index.html#objetivo","text":"Vamos a traducir el app popular de Docker voting-app demo e instalarla en un Cluster de k8 Comenzaremos con un chart sencillo y de ahi avanzaremos. La aplicaion de Docker tiene 5 componentes: A front-end for users to vote (dockersamples/examplevotingapp_vote:before) A back-end that tallies votes (dockersamples/examplevotingapp_vote:before - The voting frontend dockersamples/examplevotingapp_worker) An admin interface to see the results (dockersamples/examplevotingapp_result:before) Redis cache (redis:alpine) A PostgreSQL database (postgres:9.4)","title":"Objetivo"},{"location":"kubernetes/helm/1.start.html","text":"Getting Started with Helm \u00b6 Instale Helm en su maquina Prerequisitos \u00b6 Un cluster de k8 disponible Cliente Helm (helm cli) \u00b6 Mac \u00b6 1 $ brew install kubernetes-helm Ubuntu: \u00b6 1 $ sudo snap install helm --classic Windows: \u00b6 1 $ choco install kubernetes-helm mas formas para instalar en la pagina oficial Install Context & Version \u00b6 apuntar al contexto adecuado: 1 2 $ kubectl config current-context docker-for-desktop Mostremos la version instalada 1 2 $ helm version version.BuildInfo{Version:\"v3.1.2\", GitCommit:\"d878d4d45863e42fd5cff6743294a11d28a9abce\", GitTreeState:\"clean\", GoVersion:\"go1.13.8\"} Usando Helm \u00b6 Algunos comands de helm 1 2 3 4 5 helm help : Show help. You can get more info on a command by doing helm COMMAND --help, such as helm list --help helm search STRING : Find charts to install helm install -n NAME CHART : Install something (create a release). Example : helm install -n my-test stable/wordpress helm status NAME : Get the status of a release helm delete NAME : Delete the release. Example : helm delete my-test","title":"1.start"},{"location":"kubernetes/helm/1.start.html#getting-started-with-helm","text":"Instale Helm en su maquina","title":"Getting Started with Helm"},{"location":"kubernetes/helm/1.start.html#prerequisitos","text":"Un cluster de k8 disponible","title":"Prerequisitos"},{"location":"kubernetes/helm/1.start.html#cliente-helm-helm-cli","text":"","title":"Cliente Helm (helm cli)"},{"location":"kubernetes/helm/1.start.html#mac","text":"1 $ brew install kubernetes-helm","title":"Mac"},{"location":"kubernetes/helm/1.start.html#ubuntu","text":"1 $ sudo snap install helm --classic","title":"Ubuntu:"},{"location":"kubernetes/helm/1.start.html#windows","text":"1 $ choco install kubernetes-helm mas formas para instalar en la pagina oficial Install","title":"Windows:"},{"location":"kubernetes/helm/1.start.html#context-version","text":"apuntar al contexto adecuado: 1 2 $ kubectl config current-context docker-for-desktop Mostremos la version instalada 1 2 $ helm version version.BuildInfo{Version:\"v3.1.2\", GitCommit:\"d878d4d45863e42fd5cff6743294a11d28a9abce\", GitTreeState:\"clean\", GoVersion:\"go1.13.8\"}","title":"Context &amp; Version"},{"location":"kubernetes/helm/1.start.html#usando-helm","text":"Algunos comands de helm 1 2 3 4 5 helm help : Show help. You can get more info on a command by doing helm COMMAND --help, such as helm list --help helm search STRING : Find charts to install helm install -n NAME CHART : Install something (create a release). Example : helm install -n my-test stable/wordpress helm status NAME : Get the status of a release helm delete NAME : Delete the release. Example : helm delete my-test","title":"Usando Helm"},{"location":"kubernetes/helm/2.charts.html","text":"Charts \u00b6 Helm le llama Chart a su unidad mas pequena de instalacion y deployment. Un chart es un 'paquete' que contiene por lo menos: Chart.yaml : describe datos y metadata del Chart. templates/ : transforma los k8-manifest a manifests que se pueden desplegar. values.yaml : que define parametros con los cuales uno puede manejar y configurar con el Chart. Por lo menos estos 3 componentes se pueden empaquetar en un Chart el cual puede ser desplegado en cualquier ambiente y usualmente se pueden \"subir y guardar\" en un repositorio como https://hub.helm.sh . Charts Docu Como crear un Chart ? \u00b6 1 $ helm create voter Esto creara una estructura de directorio de la siguiente manera (con scaffold): 1 2 3 4 5 6 7 8 9 10 voter/ \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 charts \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 NOTES.txt \u2502 \u251c\u2500\u2500 _helpers.tpl \u2502 \u251c\u2500\u2500 deployment.yaml \u2502 \u251c\u2500\u2500 ingress.yaml \u2502 \u2514\u2500\u2500 service.yaml \u2514\u2500\u2500 values.yaml Chart.yaml \u00b6 Cambiemos la descripcion 1 2 3 4 5 apiVersion : v1 # The chart schema version, always v1 for Helm 2 version : 0.1.0 # The version of the chart. Change this for each release. appVersion : \"1.0\" # The version of the main app in this chart. OPTIONAL description : An example cloud native voting app name : voter Guardemos y corramos: 1 2 3 4 5 6 $ helm inspect chart ./voter apiVersion : v1 appVersion : \"1.0\" description : An example cloud native voting app name : voter version : 0.1.0 Configuremos el Front-End \u00b6 Veamos el values.yaml por default 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # Default values for voter. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount : 1 image : repository : nginx tag : stable pullPolicy : IfNotPresent nameOverride : \"\" fullnameOverride : \"\" service : type : ClusterIP port : 80 ingress : enabled : false annotations : {} # kubernetes.io/ingress.class: nginx # kubernetes.io/tls-acme: \"true\" path : / hosts : - chart-example.local tls : [] # - secretName: chart-example-tls # hosts: # - chart-example.local resources : {} # We usually recommend not to specify default resources and to leave this as a conscious # choice for the user. This also increases chances charts run on environments with little # resources, such as Minikube. If you do want to specify resources, uncomment the following # lines, adjust them as necessary, and remove the curly braces after 'resources:'. # limits: # cpu: 100m # memory: 128Mi # requests: # cpu: 100m # memory: 128Mi nodeSelector : {} tolerations : [] affinity : {} los templates por defecto crean 3 objetos basicos de kubernetes: A Deployment para correr un ms A Service para rutear trafico el ms An Ingress opcionalmente puede exponer nuestro servicio al exterior hagamos algunos cambios en la seccion de imagen: Cambie la imagen repository to dockersamples/examplevotingapp_vote Cambie tag a before Y cambie el puerto del servicio a: port: 5000 Con esto ya tenemos un Chart. Si lo va a correr en Azure agregue --set service.type=LoadBalancer al final del siguiente comando 1 2 $ helm install -n voting-app ./voter # ... some info","title":"Charts"},{"location":"kubernetes/helm/2.charts.html#charts","text":"Helm le llama Chart a su unidad mas pequena de instalacion y deployment. Un chart es un 'paquete' que contiene por lo menos: Chart.yaml : describe datos y metadata del Chart. templates/ : transforma los k8-manifest a manifests que se pueden desplegar. values.yaml : que define parametros con los cuales uno puede manejar y configurar con el Chart. Por lo menos estos 3 componentes se pueden empaquetar en un Chart el cual puede ser desplegado en cualquier ambiente y usualmente se pueden \"subir y guardar\" en un repositorio como https://hub.helm.sh . Charts Docu","title":"Charts"},{"location":"kubernetes/helm/2.charts.html#como-crear-un-chart","text":"1 $ helm create voter Esto creara una estructura de directorio de la siguiente manera (con scaffold): 1 2 3 4 5 6 7 8 9 10 voter/ \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 charts \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 NOTES.txt \u2502 \u251c\u2500\u2500 _helpers.tpl \u2502 \u251c\u2500\u2500 deployment.yaml \u2502 \u251c\u2500\u2500 ingress.yaml \u2502 \u2514\u2500\u2500 service.yaml \u2514\u2500\u2500 values.yaml","title":"Como crear un Chart ?"},{"location":"kubernetes/helm/2.charts.html#chartyaml","text":"Cambiemos la descripcion 1 2 3 4 5 apiVersion : v1 # The chart schema version, always v1 for Helm 2 version : 0.1.0 # The version of the chart. Change this for each release. appVersion : \"1.0\" # The version of the main app in this chart. OPTIONAL description : An example cloud native voting app name : voter Guardemos y corramos: 1 2 3 4 5 6 $ helm inspect chart ./voter apiVersion : v1 appVersion : \"1.0\" description : An example cloud native voting app name : voter version : 0.1.0","title":"Chart.yaml"},{"location":"kubernetes/helm/2.charts.html#configuremos-el-front-end","text":"Veamos el values.yaml por default 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # Default values for voter. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount : 1 image : repository : nginx tag : stable pullPolicy : IfNotPresent nameOverride : \"\" fullnameOverride : \"\" service : type : ClusterIP port : 80 ingress : enabled : false annotations : {} # kubernetes.io/ingress.class: nginx # kubernetes.io/tls-acme: \"true\" path : / hosts : - chart-example.local tls : [] # - secretName: chart-example-tls # hosts: # - chart-example.local resources : {} # We usually recommend not to specify default resources and to leave this as a conscious # choice for the user. This also increases chances charts run on environments with little # resources, such as Minikube. If you do want to specify resources, uncomment the following # lines, adjust them as necessary, and remove the curly braces after 'resources:'. # limits: # cpu: 100m # memory: 128Mi # requests: # cpu: 100m # memory: 128Mi nodeSelector : {} tolerations : [] affinity : {} los templates por defecto crean 3 objetos basicos de kubernetes: A Deployment para correr un ms A Service para rutear trafico el ms An Ingress opcionalmente puede exponer nuestro servicio al exterior hagamos algunos cambios en la seccion de imagen: Cambie la imagen repository to dockersamples/examplevotingapp_vote Cambie tag a before Y cambie el puerto del servicio a: port: 5000 Con esto ya tenemos un Chart. Si lo va a correr en Azure agregue --set service.type=LoadBalancer al final del siguiente comando 1 2 $ helm install -n voting-app ./voter # ... some info","title":"Configuremos el Front-End"},{"location":"kubernetes/helm/3.subcharts.html","text":"Agreguemos PostgreSQL y Redis como subcharts \u00b6 Usemos algunos charts ya existentes 1 2 3 4 5 6 $ helm search redis NAME CHART VERSION APP VERSION DESCRIPTION stable/prometheus-redis-exporter 0.3.0 0.16.0 Prometheus exporter for Redis metrics stable/redis 3.7.6 4.0.11 Open source, advanced key-value store. It is of... stable/redis-ha 2.2.1 4.0.8-r0 Highly available Redis cluster with multiple se... stable/sensu 0.2.3 0.28 Sensu monitoring framework backed by the Redis ... Vea como ya existen estos charts, si usted lo creara por usted mismo le tomaria 45 minutos como minimo. Subcharts and dependencies \u00b6 . En Helm un subchart es un depenendencia que al agregar: 1 2 3 4 5 dependencies : # A list of the chart requirements (optional) - name : library version : 0.0.1 repository : URL enabled : True Podemos hacer que Helm maneje las versiones adecuadas. (como package.json) Desde Helm v3 todo se coloca dentro de Chart.yaml , asi que agregue lo siguiente al Chart.yaml 1 2 3 4 dependencies : - name : redis # from search results above version : 3.7.6 # Also from the search results above repository : https://kubernetes-charts.storage.googleapis.com Agregue PostgreSQL \u00b6 Repita lo anterior por usted mismo. Descargar dependencias \u00b6 Corra helm dep up para que Helm descargue las dependencias Upgrade Your Release If you now run helm upgrade voting-app . you can upgrade your chart and get the new redis and postgres databases installed. Note: If you are on Azure, make sure to add the --set service.type=LoadBalancer flag again Tip: Re-installing If you ever need to reinstall instead of upgrading, use the following: $ helm delete --purge voting-app Then you can re-run the installer freshly.","title":"Agreguemos PostgreSQL y Redis como subcharts"},{"location":"kubernetes/helm/3.subcharts.html#agreguemos-postgresql-y-redis-como-subcharts","text":"Usemos algunos charts ya existentes 1 2 3 4 5 6 $ helm search redis NAME CHART VERSION APP VERSION DESCRIPTION stable/prometheus-redis-exporter 0.3.0 0.16.0 Prometheus exporter for Redis metrics stable/redis 3.7.6 4.0.11 Open source, advanced key-value store. It is of... stable/redis-ha 2.2.1 4.0.8-r0 Highly available Redis cluster with multiple se... stable/sensu 0.2.3 0.28 Sensu monitoring framework backed by the Redis ... Vea como ya existen estos charts, si usted lo creara por usted mismo le tomaria 45 minutos como minimo.","title":"Agreguemos PostgreSQL y Redis como subcharts"},{"location":"kubernetes/helm/3.subcharts.html#subcharts-and-dependencies","text":". En Helm un subchart es un depenendencia que al agregar: 1 2 3 4 5 dependencies : # A list of the chart requirements (optional) - name : library version : 0.0.1 repository : URL enabled : True Podemos hacer que Helm maneje las versiones adecuadas. (como package.json) Desde Helm v3 todo se coloca dentro de Chart.yaml , asi que agregue lo siguiente al Chart.yaml 1 2 3 4 dependencies : - name : redis # from search results above version : 3.7.6 # Also from the search results above repository : https://kubernetes-charts.storage.googleapis.com","title":"Subcharts and dependencies"},{"location":"kubernetes/helm/3.subcharts.html#agregue-postgresql","text":"Repita lo anterior por usted mismo.","title":"Agregue PostgreSQL"},{"location":"kubernetes/helm/3.subcharts.html#descargar-dependencias","text":"Corra helm dep up para que Helm descargue las dependencias Upgrade Your Release If you now run helm upgrade voting-app . you can upgrade your chart and get the new redis and postgres databases installed. Note: If you are on Azure, make sure to add the --set service.type=LoadBalancer flag again Tip: Re-installing If you ever need to reinstall instead of upgrading, use the following: $ helm delete --purge voting-app Then you can re-run the installer freshly.","title":"Descargar dependencias"},{"location":"kubernetes/helm/4.templates.html","text":"","title":"4.templates"},{"location":"semana1/d2.html","text":"Contenido D\u00eda 2 \u00b6 30% Expertise","title":"Contenido D\u00eda 2"},{"location":"semana1/d2.html#contenido-dia-2","text":"30% Expertise","title":"Contenido D\u00eda 2"},{"location":"semana1/d3.html","text":"Contenido D\u00eda 3 \u00b6 50% Expertise","title":"Contenido D\u00eda 3"},{"location":"semana1/d3.html#contenido-dia-3","text":"50% Expertise","title":"Contenido D\u00eda 3"},{"location":"semana1/topics.html","text":"T\u00f3picos de Semana 1 \u00b6 D\u00eda1 \u00b6 Docker basics: aprenderemos los basico de Docker Integracion de Docker con nuestra app: Ambientes de desarrollo local: D\u00eda2 \u00b6 CI/CD con Docker: Deploy en ambientes Single Engine: Introduccion a Cloud Native Apps: Integraci\u00f3n de Docker con Cloud Native Apps: D\u00eda3 \u00b6 Docker Swarm: Creacion de un ambiente produccion ready con Swarm: Deployment Lifecycle de nuestra app:","title":"T\u00f3picos"},{"location":"semana1/topics.html#topicos-de-semana-1","text":"","title":"T\u00f3picos de Semana 1"},{"location":"semana1/topics.html#dia1","text":"Docker basics: aprenderemos los basico de Docker Integracion de Docker con nuestra app: Ambientes de desarrollo local:","title":"D\u00eda1"},{"location":"semana1/topics.html#dia2","text":"CI/CD con Docker: Deploy en ambientes Single Engine: Introduccion a Cloud Native Apps: Integraci\u00f3n de Docker con Cloud Native Apps:","title":"D\u00eda2"},{"location":"semana1/topics.html#dia3","text":"Docker Swarm: Creacion de un ambiente produccion ready con Swarm: Deployment Lifecycle de nuestra app:","title":"D\u00eda3"},{"location":"semana1/day1/d1.docker-ci.html","text":"Continuous Integration \u00b6 Info BONUS Docker Hub provee una forma de hacer CI en su infrastructura de una manera automatizada. Github commit => Docker Hub Build => new Docker image tag 0. Enlaza tu cuenta de github \u00b6 Previo a todo debes configurar esto 1. Crea un nuevo Repositorio \u00b6 En tu cuenta de Docker hub crea un nuevo repositorio 2. Nombre de repositorio y conectalo con un Git repository \u00b6 3. Configura Builds Automaticos \u00b6 4. Cambia Build Context \u00b6 Y si gustas tag format 5. Disfruta de builds automaticos \u00b6","title":"[Continuous Integration](https://docs.docker.com/docker-hub/builds/)"},{"location":"semana1/day1/d1.docker-ci.html#continuous-integration","text":"Info BONUS Docker Hub provee una forma de hacer CI en su infrastructura de una manera automatizada. Github commit => Docker Hub Build => new Docker image tag","title":"Continuous Integration"},{"location":"semana1/day1/d1.docker-ci.html#0-enlaza-tu-cuenta-de-github","text":"Previo a todo debes configurar esto","title":"0. Enlaza tu cuenta de github"},{"location":"semana1/day1/d1.docker-ci.html#1-crea-un-nuevo-repositorio","text":"En tu cuenta de Docker hub crea un nuevo repositorio","title":"1. Crea un nuevo Repositorio"},{"location":"semana1/day1/d1.docker-ci.html#2-nombre-de-repositorio-y-conectalo-con-un-git-repository","text":"","title":"2. Nombre de repositorio y conectalo con un Git repository"},{"location":"semana1/day1/d1.docker-ci.html#3-configura-builds-automaticos","text":"","title":"3. Configura Builds Automaticos"},{"location":"semana1/day1/d1.docker-ci.html#4-cambia-build-context","text":"Y si gustas tag format","title":"4. Cambia Build Context"},{"location":"semana1/day1/d1.docker-ci.html#5-disfruta-de-builds-automaticos","text":"","title":"5. Disfruta de builds automaticos"},{"location":"semana1/day1/d1.docker.html","text":"Docker basics \u00b6","title":"Docker basics"},{"location":"semana1/day1/d1.docker.html#docker-basics","text":"","title":"Docker basics"},{"location":"semana1/day1/d1.init.html","text":"Init \u00b6 10% Expertise Success Bienvenido a nuestro d\u00eda 1 info asegurate de haber completado los pre requisitos Hands-On \ud83d\ude4c\ud83c\udffb \u00b6 Necesitmos: hacer FORK del repositorio \"base\", cuya URL es https://github.com/kontinu/container-expert.git Fork clonar SU repository en donde trabajaremos todo. 1 2 3 4 # SU-REPOSITORIO a donde le hizo FORK git clone https://github.com/<su-repositorio>/container-expert.git cd container-expert 1 2 3 4 5 6 7 8 9 10 11 # Estructura de archivos . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker \u251c\u2500\u2500 docker-compose.kontinu.yml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 docs \u251c\u2500\u2500 kubernetes \u251c\u2500\u2500 proxy \u251c\u2500\u2500 setup.sh \u2514\u2500\u2500 src Interactivo [Opcional] Corra setup.sh , le har\u00e1 unas preguntas b\u00e1sicas para hacer setup 1 ./setup.sh Manual \u2699\ufe0f O si prefiere omitir esas preguntas y configurarlo \"manualmente\" 1 2 3 4 5 echo \"\"\" DOCKER_REPO=<su nombre de repositorio de Docker> PROJECT_LANG=<Opciones: go,nodejs,python> MY_DOMAIN=<Su DNS que prefiera usar> \"\"\" > .env PROJECT_LANG: elija el lenguaje con el que usted prefiera trabajar. PROJECT_LANG puede ser modificado a lo largo del bootcamp (no recomendado) DOCKER_REPO es su cuenta/repositorio en Docker hub. MY_DOMAIN el nombre de dominio local.","title":"Init"},{"location":"semana1/day1/d1.init.html#init","text":"10% Expertise Success Bienvenido a nuestro d\u00eda 1 info asegurate de haber completado los pre requisitos","title":"Init"},{"location":"semana1/day1/d1.init.html#hands-on","text":"Necesitmos: hacer FORK del repositorio \"base\", cuya URL es https://github.com/kontinu/container-expert.git Fork clonar SU repository en donde trabajaremos todo. 1 2 3 4 # SU-REPOSITORIO a donde le hizo FORK git clone https://github.com/<su-repositorio>/container-expert.git cd container-expert 1 2 3 4 5 6 7 8 9 10 11 # Estructura de archivos . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker \u251c\u2500\u2500 docker-compose.kontinu.yml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 docs \u251c\u2500\u2500 kubernetes \u251c\u2500\u2500 proxy \u251c\u2500\u2500 setup.sh \u2514\u2500\u2500 src Interactivo [Opcional] Corra setup.sh , le har\u00e1 unas preguntas b\u00e1sicas para hacer setup 1 ./setup.sh Manual \u2699\ufe0f O si prefiere omitir esas preguntas y configurarlo \"manualmente\" 1 2 3 4 5 echo \"\"\" DOCKER_REPO=<su nombre de repositorio de Docker> PROJECT_LANG=<Opciones: go,nodejs,python> MY_DOMAIN=<Su DNS que prefiera usar> \"\"\" > .env PROJECT_LANG: elija el lenguaje con el que usted prefiera trabajar. PROJECT_LANG puede ser modificado a lo largo del bootcamp (no recomendado) DOCKER_REPO es su cuenta/repositorio en Docker hub. MY_DOMAIN el nombre de dominio local.","title":"Hands-On \ud83d\ude4c\ud83c\udffb"},{"location":"semana1/day1/d1.prereq.html","text":"Pre Requisitos \u00b6 Instalaci\u00f3n \u00b6 Asegur\u00e1te de tener estos paquetes instalados en tu computadora En Com\u00fan Instalar git Terminal y ambiente de terminal: Git bash, bash o powershell (windows) Crear una cuenta en hub.docker.com Crear una cuenta en github.com si no la tiene creada Instalar Visual Studio Code Windows \ud83d\uddd4 Windows Pro, Home Docker Desktop for Windows este ya trae integrado Kubernetes. ya trae instalado docker-compose Helm Si gusta instalar otros sabores de Kubernetes Minikube Windows Student Edition or others Te recomiendo instalar WSL e intentar instalar ahi mismo Docker. No recomendado (legacy) La \u00faltima opcion es instalar docker usando Docker toolbox MacOS \ud83c\udf4e Docker Desktop for MacOS este ya trae integrado Kubernetes. ya trae instalado docker-compose Helm Si gusta instalar otros sabores de Kubernetes Minikube Linux \ud83d\udc27 Se debe instalar por separado Docker: https://docs.docker.com/engine/install/ Docker Compose: Debes instalar tambien docker-compose Kubernetes & kubectl Minikube (Recomendado) Microk8s Kind (kubernetes in Docker) Helm Cuentas \u00b6 crea una cuenta en github.com si aun no tienes una cuenta en hub.docker.com Extras \u00b6 Google Chrome e instalar ModHeader eventualmente lo necesitaremos para no cambiar nuestro /etc/hosts.","title":"Pre Requisitos"},{"location":"semana1/day1/d1.prereq.html#pre-requisitos","text":"","title":"Pre Requisitos"},{"location":"semana1/day1/d1.prereq.html#instalacion","text":"Asegur\u00e1te de tener estos paquetes instalados en tu computadora En Com\u00fan Instalar git Terminal y ambiente de terminal: Git bash, bash o powershell (windows) Crear una cuenta en hub.docker.com Crear una cuenta en github.com si no la tiene creada Instalar Visual Studio Code Windows \ud83d\uddd4 Windows Pro, Home Docker Desktop for Windows este ya trae integrado Kubernetes. ya trae instalado docker-compose Helm Si gusta instalar otros sabores de Kubernetes Minikube Windows Student Edition or others Te recomiendo instalar WSL e intentar instalar ahi mismo Docker. No recomendado (legacy) La \u00faltima opcion es instalar docker usando Docker toolbox MacOS \ud83c\udf4e Docker Desktop for MacOS este ya trae integrado Kubernetes. ya trae instalado docker-compose Helm Si gusta instalar otros sabores de Kubernetes Minikube Linux \ud83d\udc27 Se debe instalar por separado Docker: https://docs.docker.com/engine/install/ Docker Compose: Debes instalar tambien docker-compose Kubernetes & kubectl Minikube (Recomendado) Microk8s Kind (kubernetes in Docker) Helm","title":"Instalaci\u00f3n"},{"location":"semana1/day1/d1.prereq.html#cuentas","text":"crea una cuenta en github.com si aun no tienes una cuenta en hub.docker.com","title":"Cuentas"},{"location":"semana1/day1/d1.prereq.html#extras","text":"Google Chrome e instalar ModHeader eventualmente lo necesitaremos para no cambiar nuestro /etc/hosts.","title":"Extras"},{"location":"semana2/d4.html","text":"","title":"D4"},{"location":"semana2/d5.html","text":"","title":"D5"},{"location":"semana2/d6.html","text":"","title":"D6"},{"location":"semana2/topics.html","text":"T\u00f3picos de Semana 2 \u00b6 D\u00eda 4 \u00b6 Intro a kubernetes Objetos de Kubernetes Traduccion de nuestra app en Docker a Kubernetes Deploy hacia kubernetes. D\u00eda 5 \u00b6 Kubernetes Extras y add-ons Storage Tier Manejo de Stateful apps en Kubernetes. M\u00e1s objetos de kubernetes. D\u00eda 6 \u00b6 Kubernetes app lifecycle via Helm Kubernetes Operators.","title":"T\u00f3picos"},{"location":"semana2/topics.html#topicos-de-semana-2","text":"","title":"T\u00f3picos de Semana 2"},{"location":"semana2/topics.html#dia-4","text":"Intro a kubernetes Objetos de Kubernetes Traduccion de nuestra app en Docker a Kubernetes Deploy hacia kubernetes.","title":"D\u00eda 4"},{"location":"semana2/topics.html#dia-5","text":"Kubernetes Extras y add-ons Storage Tier Manejo de Stateful apps en Kubernetes. M\u00e1s objetos de kubernetes.","title":"D\u00eda 5"},{"location":"semana2/topics.html#dia-6","text":"Kubernetes app lifecycle via Helm Kubernetes Operators.","title":"D\u00eda 6"}]}